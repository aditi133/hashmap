module traffic_light_controller  (clock,
				 timer,
				 night,
				 lane1veh,
				 lane2veh,
				 lane3veh,
				 leds,
				 data,
				 addr,
				 read_bar,
				 write_bar,
				 rst);

input rst;                                       // TLC reset                              
output reg [7:0] data;                           // Data lines of 8155
output reg [7:0] addr;                           // Address lines of 8155
output reg read_bar;                             // Read bar for 8155
output reg write_bar;                            // Write signal for 8155
output reg [8:0] leds;                           // Connected to traffic leds
reg [7:0] count1;                                // Counter for Lane 1
reg [7:0] count2;                                // Counter for Lane 2
reg [7:0] count3;                                // Counter for Lane 3
reg [7:0] count_vehicle;                         // To keep count of number of vehicles
reg [3:0] currentstate;                          // Variable fo the current state
reg flashing;                                    // For flashinging
input clock;                                     // Clock input fed to 8155 and TLC
input timer;                                 // Output from 8155 timer positive edge of it will indicate that count is completed
input night;                                     // Input to TLC for indicatiing 8pm to 8am
input [7:0] lane1veh;                            // 8 bits for  total number of vehicles fed as inputs to the TLC for lane1
input [7:0] lane2veh;                            // 8 bits for  total number of vehicles fed as inputs to the TLC for lane2
input [7:0] lane3veh;                            // 8 bits for  total number of vehicles fed as inputs to the TLC for lane3
 
reg [3:0] nextstate;				 // variable for next state

initial
begin
	
	addr=8'b00100101;
	read_bar=1;
	write_bar=0;
	data=0;
	leds=9'b111111111;
	count1=0;
	count2=0;
	count3=0;
	count_vehicle=0;
	currentstate=0;
	nextstate=0;
end

always@(posedge timer,rst,lane1veh,lane2veh,lane3veh)

begin
    
    if(lane1veh>=100)
        count1=90;
    else if(lane1veh>0)
            count1=50;
         else
            count1=0;
    if(lane2veh>=100)
         count2<=90;
    else if(lane2veh>0)
             count2<=50;
         else
             count2<=0;
    if(lane3veh>=100)
          count3<=90;
    else if(lane3veh>0)
              count3<=50;
         else
              count3<=0;
              
	if(rst==0)
	begin
		currentstate<=0;
		addr<=00100100;
	end

 	else if(night==0 )
		begin
		    currentstate<=nextstate;
			case(nextstate)
			0:
			begin
				leds<=9'b011_110_110;
		        nextstate<=1;
		        data<=count1;

			end
			1:
			begin
				leds<=9'b101_110_110;
				nextstate<=2;
				data<=5;

			end

			2:
			begin
			    flashing<=1;
				leds[2:0]<=3'b110;
				leds[8:4]<=5'b101_11;
				nextstate<=3;
				data<=5;

			end

			3:
			begin
				leds<=9'b110_011_110;
				nextstate<=4;
				data<=count2;

			end

			4:
			begin
				leds<=9'b110_101_110;
				nextstate<=5;
				data<=5;

			end

			5:
			begin
			    flashing<=1;
				leds[8:1]<=8'b110_101_11;
				nextstate<=6;
				data<=5;

			end

			6:
			begin
				leds[8:0]<=9'b110_110_011;
				nextstate<=7;
				data<=count3;

			end

			7:
			begin
				leds[8:0]<=9'b110_110_101;
				nextstate<=8;
				data<=5;

			end

			8:
			begin
			    flashing<=1;
				leds[5:0]<=6'b110_101;
				leds[8:7]<=2'b11;
				nextstate<=0;
	            data<=5;

			end
			endcase
			
		end

end

always @(clock)
begin
	if (flashing == 1)
	begin
		case(currentstate)
		2:leds[3] <= clock;
		5:leds[0] <= clock;
		8:leds[6] <= clock;
		default:flashing<=0;
		endcase
	end

	if(night==1)
	begin
	    
	    leds[0] <= 1;
	    leds[1] <= ~leds[1];
	    leds[2] <= 1;
	    leds[3] <= 1;
	    leds[4] <= ~leds[4];
	    leds[5] <= 1;
	    leds[6] <= 1;
	    leds[7] <= ~leds[7];
	    leds[8] <= 1;

	end
end

endmodule